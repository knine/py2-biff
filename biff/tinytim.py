#!/usr/bin/env python

import math
import numpy
import os
import sys
import time
import yaml

from pyraf import iraf
from termcolor import colored

class Resample:
    """
    Python class to resample a PSF model generated by Tiny Tim..

    ...

    Attributes
    ----------
        cols:
            Number of coloumns for PSF generated by Tiny Tim.
        rows:
            Number of rows for PSF generated by Tiny Tim.
        nbin : int
            Oversampling factor for PSF generated by Tiny Tim.
    
    Methods
    -------
    WritePSFs(self, **kwargs):
        Does the work.
    GetPSFList(self)
        Data for resampling input and output.

    TODO
    ----
    1 - Move data to a YAML file and likely simplify it.
    """


    def __init__(self,param):
        """
        Constructs all the necessary parameters for Resamle class.

        Parameters
        ----------
            None.
        """

        self.samplelist = param['path'] + "/data/ResampleList.yaml"
        self.psfinfo = param['path'] + "/data/nicmos.yaml"

        try:
            with open(self.psfinfo,'r') as file:
                info = yaml.load(file, Loader=yaml.FullLoader)
                self.nbin = info['nicmos1']['nbin']
                self.cols = info['nicmos1']['cols']
                self.rows = info['nicmos1']['rows']
        except IOError:
            print(colored('ERROR: ' + self.psfinfo + ' could not be found.\n',"red"))
            GoOn = raw_input(colored("Press Enter To Continue...","green"))

    def WritePSFs(self, **kwargs):

        print("\n" + "#" * 60 + "\n")

        iraf.dataio()
        iraf.dataio.setParam("wtextimage.header","no")
        iraf.dataio.setParam("wtextimage.format","15.8g")
        iraf.dataio.setParam("wtextimage.maxlinelen","20")

        try:
            with open(self.samplelist,'r') as file:
                InputList = yaml.load(file, Loader=yaml.FullLoader)
        except IOError:
            print(colored('ERROR: ' + self.samplelist + ' could not be found.\n',"red"))
            GoOn = raw_input(colored("Press Enter To Continue...","green"))

	LogFile = open('ResamplePSF.log','w')

        for InputLine in InputList:

	    print "Creating Cylon Model:\t\t\t\t\t[" + InputLine['PrimaryOut'][5:7] + "]\r",
	    sys.stdout.flush()

            WTextIn = os.getcwd() + "/" + str(InputLine['WTextIn'])
            WTextOut = os.getcwd() + "/" + str(InputLine['WTextOut'])
            iraf.wtextimage(WTextIn, WTextOut)

	    LogFile.write("%s ---> %s / %s" % (InputLine['WTextOut'],InputLine['PrimaryOut'],InputLine['SecondaryOut']))
	    LogFile.flush()

            InputPSF = numpy.zeros((self.cols*self.nbin,self.rows*self.nbin))
            PSFValue = open(InputLine['WTextOut'], 'r')

            # Loop through the number of columns and rows for the InputPSF and put those values in a matrix array
            for j in range(1,InputLine['nrow']+1):                                  # Loop through each row (Y)
                for i in range(1,InputLine['ncol']+1):                              # Loop through each column (X)
                    InputPSF[i,j] = float(PSFValue.readline())                      # Read the next line in the file and assign it to an array element

            InputSum = numpy.add.reduce(numpy.add.reduce(InputPSF))                 # Total of all InputPSF values

            xdim = InputLine['ncol'] // self.nbin                                   # X and Y dimentions of output PSF
            ydim = InputLine['nrow'] // self.nbin                                   # Use Floor Division so this will work in Python 3+

            OutputPSF = numpy.zeros((self.cols,self.rows))

	    # Loop through the number of columns and rows for the OutputPSF
            for j in range(1, ydim + 1):
                for i in range(1, xdim + 1):

                    nxcount = self.nbin*i                                   # Low x value of array slice
                    nxlow = nxcount-(self.nbin-1)                           # High x value of array slice
                    nycount = self.nbin*j                                   # Low y value of array slice
                    nylow = nycount-(self.nbin-1)                           # High y value of array slice

                    # Slice off a 10 x 10 part of the InputPSF and make it one pixel of the OutputPSF
                    OutputPSF[i,j] = numpy.add.reduce(numpy.add.reduce(InputPSF[nxlow:nxcount+1,nylow:nycount+1]))

            OutputSum = numpy.add.reduce(numpy.add.reduce(OutputPSF))               # Total of all OutputPSF values

	    if "primary" in kwargs:
	        PrimaryOutputFile = open(InputLine['PrimaryOut'], 'w')                                     # Open the output file for writing

	        for j in range(1, ydim + 1):							# Loop through the columns and rows for the OutputPSF
        	    for i in range(1, xdim + 1):
                        PrimaryOutputFile.write(str(OutputPSF[i,j]) + '\n')		# write each value to the output file

		PrimaryOutputFile.close()
		LogFile.write("%s ---> %s (%f, %f)\n" % (InputLine['WTextOut'],InputLine['PrimaryOut'],InputSum, OutputSum))

	    if "secondary" in kwargs:
	        SecondaryOutputFile = open(InputLine['SecondaryOut'], 'w')

                for j in range(1, ydim + 1):							 # Loop through the columns and rows for the OutputPSF
                    for i in range(1, xdim + 1):
                        SecondaryOutputFile.write(str(OutputPSF[i,j]) + '\n')		# write each value to the output file
                        
                SecondaryOutputFile.close()
                LogFile.write("%s ---> %s (%f, %f)\n" % (InputLine['WTextOut'],InputLine['SecondaryOut'],InputSum, OutputSum))
                                
	    LogFile.flush()
	    os.remove(WTextOut)								# Save Space And Remove The FITS File

            #LogFile.write(" (%f, %f)\n" % (InputSum, OutputSum))                             # Print some status information to the screen

	LogFile.close()
	print "Creating Cylon Model:\t\t\t\t\t[OK]\n"
	print "#" * 60 	

class TinyTim():
    """
    Python wrapper class to run STScI Tiny Tim PSF model program.

    ...

    Attributes
    ----------
        tiny1out : str
            Name of the parameter file produced by tiny1 and read by tiny2.
    
    Methods
    -------
    tiny1():
        Runs the tiny1 STScI program.
    tiny1()
        Runs the tiny2 STScI program.

    TODO
    ----
    Verify tiny1 and tiny2 exist in the given path.
    """

    def __init__(self,param):
        """
        Constructs all the necessary parameters for TinyTim class.

        Parameters
        ----------
            None.
        """
        os.environ["TINYTIM"] = param['path']
        self.tiny1out = param['outfile']

    def tiny1(self):
        """
        """
        print("\n" + "#" * 60 + "\n")
        print("Running tiny1...")
        os.system('env tiny1 ' + self.tiny1out)
        print("\n" + "#" * 60)
        GoOn = raw_input("Press Enter To Continue...")

    def tiny2(self):
        """
        """
        print("\n" + "#" * 60 + "\n")
        print("Running tiny2 On Parameter File...\n")
        os.system('env tiny2 ' + self.tiny1out)
        GoOn = raw_input("Press Enter To Continue...")
